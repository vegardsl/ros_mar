# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rtabmap_ros/Info.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class Info(genpy.Message):
  _md5sum = "a3319209ed98ef442877eb716ab8963b"
  _type = "rtabmap_ros/Info"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """
########################################
# RTAB-Map info with statistics 
########################################

Header header

int32 refId
int32 loopClosureId
int32 proximityDetectionId

geometry_msgs/Transform loopClosureTransform

####
# For statistics...
####
# std::map<int, float> posterior;
int32[] posteriorKeys
float32[] posteriorValues

# std::map<int, float> likelihood;
int32[] likelihoodKeys
float32[] likelihoodValues

# std::map<int, float> rawLikelihood;
int32[] rawLikelihoodKeys
float32[] rawLikelihoodValues

# std::map<int, int> weights;
int32[] weightsKeys
int32[] weightsValues

# std::map<std::string, float> stats
string[] statsKeys
float32[] statsValues

# std::vector<int> localPath
int32[] localPath
int32 currentGoalId
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['header','refId','loopClosureId','proximityDetectionId','loopClosureTransform','posteriorKeys','posteriorValues','likelihoodKeys','likelihoodValues','rawLikelihoodKeys','rawLikelihoodValues','weightsKeys','weightsValues','statsKeys','statsValues','localPath','currentGoalId']
  _slot_types = ['std_msgs/Header','int32','int32','int32','geometry_msgs/Transform','int32[]','float32[]','int32[]','float32[]','int32[]','float32[]','int32[]','int32[]','string[]','float32[]','int32[]','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,refId,loopClosureId,proximityDetectionId,loopClosureTransform,posteriorKeys,posteriorValues,likelihoodKeys,likelihoodValues,rawLikelihoodKeys,rawLikelihoodValues,weightsKeys,weightsValues,statsKeys,statsValues,localPath,currentGoalId

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Info, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.refId is None:
        self.refId = 0
      if self.loopClosureId is None:
        self.loopClosureId = 0
      if self.proximityDetectionId is None:
        self.proximityDetectionId = 0
      if self.loopClosureTransform is None:
        self.loopClosureTransform = geometry_msgs.msg.Transform()
      if self.posteriorKeys is None:
        self.posteriorKeys = []
      if self.posteriorValues is None:
        self.posteriorValues = []
      if self.likelihoodKeys is None:
        self.likelihoodKeys = []
      if self.likelihoodValues is None:
        self.likelihoodValues = []
      if self.rawLikelihoodKeys is None:
        self.rawLikelihoodKeys = []
      if self.rawLikelihoodValues is None:
        self.rawLikelihoodValues = []
      if self.weightsKeys is None:
        self.weightsKeys = []
      if self.weightsValues is None:
        self.weightsValues = []
      if self.statsKeys is None:
        self.statsKeys = []
      if self.statsValues is None:
        self.statsValues = []
      if self.localPath is None:
        self.localPath = []
      if self.currentGoalId is None:
        self.currentGoalId = 0
    else:
      self.header = std_msgs.msg.Header()
      self.refId = 0
      self.loopClosureId = 0
      self.proximityDetectionId = 0
      self.loopClosureTransform = geometry_msgs.msg.Transform()
      self.posteriorKeys = []
      self.posteriorValues = []
      self.likelihoodKeys = []
      self.likelihoodValues = []
      self.rawLikelihoodKeys = []
      self.rawLikelihoodValues = []
      self.weightsKeys = []
      self.weightsValues = []
      self.statsKeys = []
      self.statsValues = []
      self.localPath = []
      self.currentGoalId = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i7d.pack(_x.refId, _x.loopClosureId, _x.proximityDetectionId, _x.loopClosureTransform.translation.x, _x.loopClosureTransform.translation.y, _x.loopClosureTransform.translation.z, _x.loopClosureTransform.rotation.x, _x.loopClosureTransform.rotation.y, _x.loopClosureTransform.rotation.z, _x.loopClosureTransform.rotation.w))
      length = len(self.posteriorKeys)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.posteriorKeys))
      length = len(self.posteriorValues)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.posteriorValues))
      length = len(self.likelihoodKeys)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.likelihoodKeys))
      length = len(self.likelihoodValues)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.likelihoodValues))
      length = len(self.rawLikelihoodKeys)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.rawLikelihoodKeys))
      length = len(self.rawLikelihoodValues)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.rawLikelihoodValues))
      length = len(self.weightsKeys)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.weightsKeys))
      length = len(self.weightsValues)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.weightsValues))
      length = len(self.statsKeys)
      buff.write(_struct_I.pack(length))
      for val1 in self.statsKeys:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.statsValues)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.statsValues))
      length = len(self.localPath)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.localPath))
      buff.write(_struct_i.pack(self.currentGoalId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.loopClosureTransform is None:
        self.loopClosureTransform = geometry_msgs.msg.Transform()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.refId, _x.loopClosureId, _x.proximityDetectionId, _x.loopClosureTransform.translation.x, _x.loopClosureTransform.translation.y, _x.loopClosureTransform.translation.z, _x.loopClosureTransform.rotation.x, _x.loopClosureTransform.rotation.y, _x.loopClosureTransform.rotation.z, _x.loopClosureTransform.rotation.w,) = _struct_3i7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.posteriorKeys = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.posteriorValues = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.likelihoodKeys = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.likelihoodValues = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.rawLikelihoodKeys = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.rawLikelihoodValues = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.weightsKeys = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.weightsValues = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.statsKeys = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.statsKeys.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.statsValues = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.localPath = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.currentGoalId,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i7d.pack(_x.refId, _x.loopClosureId, _x.proximityDetectionId, _x.loopClosureTransform.translation.x, _x.loopClosureTransform.translation.y, _x.loopClosureTransform.translation.z, _x.loopClosureTransform.rotation.x, _x.loopClosureTransform.rotation.y, _x.loopClosureTransform.rotation.z, _x.loopClosureTransform.rotation.w))
      length = len(self.posteriorKeys)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.posteriorKeys.tostring())
      length = len(self.posteriorValues)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.posteriorValues.tostring())
      length = len(self.likelihoodKeys)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.likelihoodKeys.tostring())
      length = len(self.likelihoodValues)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.likelihoodValues.tostring())
      length = len(self.rawLikelihoodKeys)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.rawLikelihoodKeys.tostring())
      length = len(self.rawLikelihoodValues)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.rawLikelihoodValues.tostring())
      length = len(self.weightsKeys)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.weightsKeys.tostring())
      length = len(self.weightsValues)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.weightsValues.tostring())
      length = len(self.statsKeys)
      buff.write(_struct_I.pack(length))
      for val1 in self.statsKeys:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.statsValues)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.statsValues.tostring())
      length = len(self.localPath)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.localPath.tostring())
      buff.write(_struct_i.pack(self.currentGoalId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.loopClosureTransform is None:
        self.loopClosureTransform = geometry_msgs.msg.Transform()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.refId, _x.loopClosureId, _x.proximityDetectionId, _x.loopClosureTransform.translation.x, _x.loopClosureTransform.translation.y, _x.loopClosureTransform.translation.z, _x.loopClosureTransform.rotation.x, _x.loopClosureTransform.rotation.y, _x.loopClosureTransform.rotation.z, _x.loopClosureTransform.rotation.w,) = _struct_3i7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.posteriorKeys = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.posteriorValues = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.likelihoodKeys = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.likelihoodValues = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.rawLikelihoodKeys = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.rawLikelihoodValues = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.weightsKeys = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.weightsValues = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.statsKeys = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.statsKeys.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.statsValues = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.localPath = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (self.currentGoalId,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_3I = struct.Struct("<3I")
_struct_3i7d = struct.Struct("<3i7d")
