# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rtabmap_ros/Link.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Link(genpy.Message):
  _md5sum = "aab00d57f13a2febcbee54fbb44691d2"
  _type = "rtabmap_ros/Link"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#class rtabmap::Link
#{
#   int from;
#   int to;
#   Type type;
#   Transform transform;
#   float variance;
#}

int32 fromId
int32 toId
int32 type
geometry_msgs/Transform transform
float32 rotVariance
float32 transVariance
================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['fromId','toId','type','transform','rotVariance','transVariance']
  _slot_types = ['int32','int32','int32','geometry_msgs/Transform','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fromId,toId,type,transform,rotVariance,transVariance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Link, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.fromId is None:
        self.fromId = 0
      if self.toId is None:
        self.toId = 0
      if self.type is None:
        self.type = 0
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      if self.rotVariance is None:
        self.rotVariance = 0.
      if self.transVariance is None:
        self.transVariance = 0.
    else:
      self.fromId = 0
      self.toId = 0
      self.type = 0
      self.transform = geometry_msgs.msg.Transform()
      self.rotVariance = 0.
      self.transVariance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3i7d2f.pack(_x.fromId, _x.toId, _x.type, _x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.rotVariance, _x.transVariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      end = 0
      _x = self
      start = end
      end += 76
      (_x.fromId, _x.toId, _x.type, _x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.rotVariance, _x.transVariance,) = _struct_3i7d2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3i7d2f.pack(_x.fromId, _x.toId, _x.type, _x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.rotVariance, _x.transVariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      end = 0
      _x = self
      start = end
      end += 76
      (_x.fromId, _x.toId, _x.type, _x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w, _x.rotVariance, _x.transVariance,) = _struct_3i7d2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3i7d2f = struct.Struct("<3i7d2f")
