// Generated by gencpp from file rtabmap_ros/OdomInfo.msg
// DO NOT EDIT!


#ifndef RTABMAP_ROS_MESSAGE_ODOMINFO_H
#define RTABMAP_ROS_MESSAGE_ODOMINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <rtabmap_ros/KeyPoint.h>
#include <rtabmap_ros/Point3f.h>
#include <rtabmap_ros/Point2f.h>
#include <rtabmap_ros/Point2f.h>
#include <geometry_msgs/Transform.h>
#include <geometry_msgs/Transform.h>

namespace rtabmap_ros
{
template <class ContainerAllocator>
struct OdomInfo_
{
  typedef OdomInfo_<ContainerAllocator> Type;

  OdomInfo_()
    : header()
    , lost(false)
    , matches(0)
    , inliers(0)
    , variance(0.0)
    , features(0)
    , localMapSize(0)
    , timeEstimation(0.0)
    , timeParticleFiltering(0.0)
    , stamp(0.0)
    , interval(0.0)
    , distanceTravelled(0.0)
    , type(0)
    , wordsKeys()
    , wordsValues()
    , wordMatches()
    , wordInliers()
    , localMapKeys()
    , localMapValues()
    , refCorners()
    , newCorners()
    , cornerInliers()
    , transform()
    , transformFiltered()  {
    }
  OdomInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lost(false)
    , matches(0)
    , inliers(0)
    , variance(0.0)
    , features(0)
    , localMapSize(0)
    , timeEstimation(0.0)
    , timeParticleFiltering(0.0)
    , stamp(0.0)
    , interval(0.0)
    , distanceTravelled(0.0)
    , type(0)
    , wordsKeys(_alloc)
    , wordsValues(_alloc)
    , wordMatches(_alloc)
    , wordInliers(_alloc)
    , localMapKeys(_alloc)
    , localMapValues(_alloc)
    , refCorners(_alloc)
    , newCorners(_alloc)
    , cornerInliers(_alloc)
    , transform(_alloc)
    , transformFiltered(_alloc)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _lost_type;
  _lost_type lost;

   typedef int32_t _matches_type;
  _matches_type matches;

   typedef int32_t _inliers_type;
  _inliers_type inliers;

   typedef float _variance_type;
  _variance_type variance;

   typedef int32_t _features_type;
  _features_type features;

   typedef int32_t _localMapSize_type;
  _localMapSize_type localMapSize;

   typedef float _timeEstimation_type;
  _timeEstimation_type timeEstimation;

   typedef float _timeParticleFiltering_type;
  _timeParticleFiltering_type timeParticleFiltering;

   typedef float _stamp_type;
  _stamp_type stamp;

   typedef float _interval_type;
  _interval_type interval;

   typedef float _distanceTravelled_type;
  _distanceTravelled_type distanceTravelled;

   typedef int32_t _type_type;
  _type_type type;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _wordsKeys_type;
  _wordsKeys_type wordsKeys;

   typedef std::vector< ::rtabmap_ros::KeyPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtabmap_ros::KeyPoint_<ContainerAllocator> >::other >  _wordsValues_type;
  _wordsValues_type wordsValues;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _wordMatches_type;
  _wordMatches_type wordMatches;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _wordInliers_type;
  _wordInliers_type wordInliers;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _localMapKeys_type;
  _localMapKeys_type localMapKeys;

   typedef std::vector< ::rtabmap_ros::Point3f_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtabmap_ros::Point3f_<ContainerAllocator> >::other >  _localMapValues_type;
  _localMapValues_type localMapValues;

   typedef std::vector< ::rtabmap_ros::Point2f_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtabmap_ros::Point2f_<ContainerAllocator> >::other >  _refCorners_type;
  _refCorners_type refCorners;

   typedef std::vector< ::rtabmap_ros::Point2f_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtabmap_ros::Point2f_<ContainerAllocator> >::other >  _newCorners_type;
  _newCorners_type newCorners;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _cornerInliers_type;
  _cornerInliers_type cornerInliers;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _transform_type;
  _transform_type transform;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _transformFiltered_type;
  _transformFiltered_type transformFiltered;




  typedef boost::shared_ptr< ::rtabmap_ros::OdomInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtabmap_ros::OdomInfo_<ContainerAllocator> const> ConstPtr;

}; // struct OdomInfo_

typedef ::rtabmap_ros::OdomInfo_<std::allocator<void> > OdomInfo;

typedef boost::shared_ptr< ::rtabmap_ros::OdomInfo > OdomInfoPtr;
typedef boost::shared_ptr< ::rtabmap_ros::OdomInfo const> OdomInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rtabmap_ros::OdomInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rtabmap_ros::OdomInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rtabmap_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'rtabmap_ros': ['/home/vegard/mar_project_ws/src/rtabmap_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rtabmap_ros::OdomInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rtabmap_ros::OdomInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rtabmap_ros::OdomInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rtabmap_ros::OdomInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rtabmap_ros::OdomInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rtabmap_ros::OdomInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rtabmap_ros::OdomInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d794e200aa302ed3b85b2405ee2c2499";
  }

  static const char* value(const ::rtabmap_ros::OdomInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd794e200aa302ed3ULL;
  static const uint64_t static_value2 = 0xb85b2405ee2c2499ULL;
};

template<class ContainerAllocator>
struct DataType< ::rtabmap_ros::OdomInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rtabmap_ros/OdomInfo";
  }

  static const char* value(const ::rtabmap_ros::OdomInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rtabmap_ros::OdomInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
Header header\n\
\n\
#class rtabmap::OdometryInfo\n\
#{\n\
#    bool lost;\n\
#    int matches;\n\
#    int inliers;\n\
#    float variance;\n\
#    int features;\n\
#    int localMapSize;\n\
#    float time;\n\
#\n\
#    int type; // 0=BOW, 1=Optical Flow, 2=ICP\n\
#\n\
#    // BOW odometry\n\
#    std::multimap<int, cv::KeyPoint> words;\n\
#    std::vector<int> wordMatches;\n\
#    std::vector<int> wordInliers;\n\
#\n\
#    // Optical Flow odometry\n\
#    std::vector<cv::Point2f> refCorners;\n\
#    std::vector<cv::Point2f> newCorners;\n\
#    std::vector<int> cornerInliers;\n\
#}\n\
\n\
bool lost\n\
int32 matches\n\
int32 inliers\n\
float32 variance\n\
int32 features\n\
int32 localMapSize\n\
float32 timeEstimation\n\
float32 timeParticleFiltering\n\
float32 stamp\n\
float32 interval\n\
float32 distanceTravelled\n\
\n\
int32 type\n\
\n\
int32[] wordsKeys\n\
KeyPoint[] wordsValues\n\
int32[] wordMatches\n\
int32[] wordInliers\n\
int32[] localMapKeys\n\
Point3f[] localMapValues\n\
\n\
Point2f[] refCorners\n\
Point2f[] newCorners\n\
int32[] cornerInliers\n\
\n\
geometry_msgs/Transform transform\n\
geometry_msgs/Transform transformFiltered\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: rtabmap_ros/KeyPoint\n\
#class cv::KeyPoint\n\
#{\n\
#    Point2f pt;\n\
#    float size;\n\
#    float angle;\n\
#    float response;\n\
#    int octave;\n\
#    int class_id;\n\
#}\n\
\n\
Point2f pt\n\
float32 size\n\
float32 angle\n\
float32 response\n\
int32 octave\n\
int32 class_id\n\
================================================================================\n\
MSG: rtabmap_ros/Point2f\n\
#class cv::Point2f\n\
#{\n\
#    float x;\n\
#    float y;\n\
#}\n\
\n\
float32 x\n\
float32 y\n\
================================================================================\n\
MSG: rtabmap_ros/Point3f\n\
#class cv::Point3f\n\
#{\n\
#    float x;\n\
#    float y;\n\
#    float z;\n\
#}\n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::rtabmap_ros::OdomInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rtabmap_ros::OdomInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lost);
      stream.next(m.matches);
      stream.next(m.inliers);
      stream.next(m.variance);
      stream.next(m.features);
      stream.next(m.localMapSize);
      stream.next(m.timeEstimation);
      stream.next(m.timeParticleFiltering);
      stream.next(m.stamp);
      stream.next(m.interval);
      stream.next(m.distanceTravelled);
      stream.next(m.type);
      stream.next(m.wordsKeys);
      stream.next(m.wordsValues);
      stream.next(m.wordMatches);
      stream.next(m.wordInliers);
      stream.next(m.localMapKeys);
      stream.next(m.localMapValues);
      stream.next(m.refCorners);
      stream.next(m.newCorners);
      stream.next(m.cornerInliers);
      stream.next(m.transform);
      stream.next(m.transformFiltered);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct OdomInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtabmap_ros::OdomInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rtabmap_ros::OdomInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lost: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lost);
    s << indent << "matches: ";
    Printer<int32_t>::stream(s, indent + "  ", v.matches);
    s << indent << "inliers: ";
    Printer<int32_t>::stream(s, indent + "  ", v.inliers);
    s << indent << "variance: ";
    Printer<float>::stream(s, indent + "  ", v.variance);
    s << indent << "features: ";
    Printer<int32_t>::stream(s, indent + "  ", v.features);
    s << indent << "localMapSize: ";
    Printer<int32_t>::stream(s, indent + "  ", v.localMapSize);
    s << indent << "timeEstimation: ";
    Printer<float>::stream(s, indent + "  ", v.timeEstimation);
    s << indent << "timeParticleFiltering: ";
    Printer<float>::stream(s, indent + "  ", v.timeParticleFiltering);
    s << indent << "stamp: ";
    Printer<float>::stream(s, indent + "  ", v.stamp);
    s << indent << "interval: ";
    Printer<float>::stream(s, indent + "  ", v.interval);
    s << indent << "distanceTravelled: ";
    Printer<float>::stream(s, indent + "  ", v.distanceTravelled);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "wordsKeys[]" << std::endl;
    for (size_t i = 0; i < v.wordsKeys.size(); ++i)
    {
      s << indent << "  wordsKeys[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.wordsKeys[i]);
    }
    s << indent << "wordsValues[]" << std::endl;
    for (size_t i = 0; i < v.wordsValues.size(); ++i)
    {
      s << indent << "  wordsValues[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtabmap_ros::KeyPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.wordsValues[i]);
    }
    s << indent << "wordMatches[]" << std::endl;
    for (size_t i = 0; i < v.wordMatches.size(); ++i)
    {
      s << indent << "  wordMatches[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.wordMatches[i]);
    }
    s << indent << "wordInliers[]" << std::endl;
    for (size_t i = 0; i < v.wordInliers.size(); ++i)
    {
      s << indent << "  wordInliers[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.wordInliers[i]);
    }
    s << indent << "localMapKeys[]" << std::endl;
    for (size_t i = 0; i < v.localMapKeys.size(); ++i)
    {
      s << indent << "  localMapKeys[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.localMapKeys[i]);
    }
    s << indent << "localMapValues[]" << std::endl;
    for (size_t i = 0; i < v.localMapValues.size(); ++i)
    {
      s << indent << "  localMapValues[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtabmap_ros::Point3f_<ContainerAllocator> >::stream(s, indent + "    ", v.localMapValues[i]);
    }
    s << indent << "refCorners[]" << std::endl;
    for (size_t i = 0; i < v.refCorners.size(); ++i)
    {
      s << indent << "  refCorners[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtabmap_ros::Point2f_<ContainerAllocator> >::stream(s, indent + "    ", v.refCorners[i]);
    }
    s << indent << "newCorners[]" << std::endl;
    for (size_t i = 0; i < v.newCorners.size(); ++i)
    {
      s << indent << "  newCorners[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtabmap_ros::Point2f_<ContainerAllocator> >::stream(s, indent + "    ", v.newCorners[i]);
    }
    s << indent << "cornerInliers[]" << std::endl;
    for (size_t i = 0; i < v.cornerInliers.size(); ++i)
    {
      s << indent << "  cornerInliers[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.cornerInliers[i]);
    }
    s << indent << "transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
    s << indent << "transformFiltered: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.transformFiltered);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RTABMAP_ROS_MESSAGE_ODOMINFO_H
