// ROS includes
#include "ros/ros.h"
#include "sensor_msgs/Image.h"
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>

// C/C++ includes
#include "stdio.h"
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

// OpenCV includes
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>

static const std::string OPENCV_WINDOW = "Image window";

void error(const char *msg)
{
    perror(msg);
    exit(1);
}


class ImageConverter
{
  ros::NodeHandle nh_;
  image_transport::ImageTransport it_;
  image_transport::Subscriber image_sub_;
  image_transport::Publisher image_pub_;

  
public:
  ImageConverter()
    : it_(nh_)
  {
    // Subscrive to input video feed and publish output video feed
    image_sub_ = it_.subscribe("/camera/rgb/image_raw", 1, 
      &ImageConverter::imageCb, this);
    image_pub_ = it_.advertise("/image_converter/output_video", 1);

    //cv::namedWindow(OPENCV_WINDOW);
  }

  ~ImageConverter()
  {
    //cv::destroyWindow(OPENCV_WINDOW);
  }

  int sockfd, portno, n;
  struct sockaddr_in serv_addr;
  struct hostent *server;

  int initUdp(int _portno)
  {
    portno = _portno;
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if(sockfd < 0)
    {
      error("ERROR opening socket");
      return -1;
    }
    /*
    bzero((char *) &serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    //bcopy((char *)server->h_addr, 
    //     (char *)&serv_addr.sin_addr.s_addr,
    //     server->h_length);
    serv_addr.sin_addr.s_addr = INADDR_ANY;
    serv_addr.sin_port = htons(portno);
    if (connect(sockfd, (struct sockaddr *) &serv_addr,sizeof(serv_addr)) < 0) 
    {
      error("ERROR connecting");
      return -1;
    }
*/

    memset((char *)&serv_addr, 0, sizeof(serv_addr)); serv_addr.sin_family = AF_INET;     
    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY); serv_addr.sin_port = htons(0); 
    if (bind(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) 
    { 
      perror("ERROR bind failed"); 
      return -1; 
    }

    
    return 0;
  }

  void imageCb(const sensor_msgs::ImageConstPtr& msg)
  {
    cv_bridge::CvImagePtr cv_ptr;
    cv::Mat imgMat;
    try
    {
      //cvImage = cv_bridge::toCvShare(msg, "bgr8")->image;
      cv_ptr = cv_bridge::toCvCopy(msg, "bgr8");
      imgMat = cv_ptr->image;

      //cv::imshow("view", cv_bridge::toCvShare(msg, "bgr8")->image);
      //cv::waitKey(30);
    }
    catch (cv_bridge::Exception& e)
    {
      ROS_ERROR("Could not convert from '%s' to 'bgr8'.", msg->encoding.c_str());
    }

    if(!imgMat.empty())
    {
      printf("Show image\n");
      //cv::imshow(OPENCV_WINDOW, imgMat);
      imgMat = (imgMat.reshape(0,1)); // Make image continous;
      int imgSize = imgMat.total()*imgMat.elemSize();
    
      int bytes = send(sockfd, imgMat.data, imgSize, 0);
      
      printf("Transmitted\n");
      //getchar();

      cv::waitKey(30);
    }
   

/*
    cv_bridge::CvImagePtr cv_ptr;
    try
    {
      cv_ptr = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::BGR8);
    }
    catch (cv_bridge::Exception& e)
    {
      ROS_ERROR("cv_bridge exception: %s", e.what());
      return;
    }

    // Draw an example circle on the video stream
    if (cv_ptr->image.rows > 60 && cv_ptr->image.cols > 60)
      //cv::circle(cv_ptr->image, cv::Point(50, 50), 10, CV_RGB(255,0,0));

    // Update GUI Window
    //cv::imshow(OPENCV_WINDOW, cv_ptr->image);
    cv::waitKey(3);
    
    // Output modified video stream
    //image_pub_.publish(cv_ptr->toImageMsg());

*/
  }
};



int main(int argc, char *argv[])
{
  ros::init(argc, argv, "video_server");
  //ros::NodeHandle n;

  //printf("Yo! Sup!\n");

  //cv::Mat M(640,480, CV_8UC3, cv::Scalar(0,0,255));

  //cv::imshow("M",M);

  //getchar();

  ImageConverter ic;

  if (argc < 2) {
    fprintf(stderr,"ERROR, no port provided\n");
    exit(1);
  }

  int ret = ic.initUdp(atoi(argv[1]));
  if(ret < 0)
  {
    fprintf(stderr,"ERROR, initUdp\n");
    exit(1);
  }

  ros::spin();

  return 0;
}


